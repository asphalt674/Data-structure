#include <stdio.h>
#include <stdlib.h>
struct node
{
    int data;
    struct node *left;
    struct node *right;
};
struct node *createnode(int data)
{
    struct node  *n=(struct node  *)malloc(sizeof(struct node ));
    n->data=data;
    n->left=NULL;
    n->right=NULL;
    return n;
}
void preorder(struct node *root)
{
    if(root!=NULL)
    {
        printf("%d ",root->data);
        preorder(root->left);
        preorder(root->right);
    }
}
//int is
//Searching in BST
struct node *search(struct node *root,int key)
{
    if(root==NULL)
    {
        return NULL;
    }
    if(root->data==key)
    {
        return root;
    }
    else if(root->data<key)
    {
        return search(root->right,key);
    }
    else
    {
        return search(root->left,key);
    }
}
int main()
{
   struct node *p=createnode(5);
   struct node *p1=createnode(3);
   struct node *p2=createnode(6);
   struct node *p3=createnode(1);
   struct node *p4=createnode(4);
    //finally tree 
    //        5
    //       / \
    //     3    6 
    //    / \    
    //   1   4
   p->left=p1;
   p->right=p2;
   p1->left=p3;
   p1->right=p4;
   //preorder(p);
   if(search(p,4)!=NULL)
   {
       printf("Value is found\n");
   }
   else
   {
       printf("Value is not found\n");
   }
}
